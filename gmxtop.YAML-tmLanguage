# [PackageDev] target_format: plist, ext: tmLanguage
---
name: GROMACS Topology
scopeName: source.gmxtop
fileTypes: [top, itp]
uuid: 346d18f1-6deb-4154-a278-f4c9e8f400f3

patterns:
patterns:
- include: '#translation_unit'
- include: '#topol_block'

repository:
  topol_block:
    patterns:
    - name: posres.gmxtop
      begin: '\[\s*(position_restraints)\s*\]'
      captures:
        '1': {name: keyword.posres.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: posres.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)(.*)
        captures:
          '1': {name: serial.posres.line.gmxtop}
          '2': {name: occupancy.posres.line.gmxtop}
          '3': {name: force.x.posres.line.gmxtop}
          '4': {name: force.y.posres.line.gmxtop}
          '5': {name: force.z.posres.line.gmxtop}
          '6': {name: comment.posres.line.gmxtop}
    - name: system.gmxtop
      begin: '\[\s*(system)\s*\]'
      captures:
        '1': {name: keyword.system.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: system.line.gmxtop 
        match: ^([^\[]*)(.*)
        captures:
          '1': {name: string.system.line.gmxtop}
          '2': {name: comment.posres.line.gmxtop}
    - name: molecules.gmxtop
      begin: '\[\s*(molecules)\s*\]'
      captures:
        '1': {name: keyword.molecules.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: molecules.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: name.molecules.line.gmxtop}
          '2': {name: constant.numeric.molecules.line.gmxtop}
          '3': {name: comment.posres.line.gmxtop}
    - name: moleculetype.gmxtop
      begin: '\[\s*(moleculetype)\s*\]'
      captures:
        '1': {name: keyword.moleculetype.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: moleculetype.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: name.moleculetype.line.gmxtop}
          '2': {name: constant.numeric.moleculetype.line.gmxtop}
          '3': {name: comment.posres.line.gmxtop}
    - name: atoms.gmxtop
      begin: '\[\s*(atoms)\s*\]'
      captures:
        '1': {name: keyword.atoms.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: atoms.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)(.*)
        captures:
          '1': {name: serial.atoms.line.gmxtop}
          '2': {name: element.atoms.line.gmxtop}
          '3': {name: resSeq.atoms.line.gmxtop}
          '4': {name: resName.atoms.line.gmxtop}
          '5': {name: name.atoms.line.gmxtop}
          '6': {name: cgnr.atoms.line.gmxtop}
          '7': {name: charge.atoms.line.gmxtop}
          '8': {name: mass.atoms.line.gmxtop}
          '9': {name: element.b.atoms.line.gmxtop}
          '10': {name: charge.b.atoms.line.gmxtop}
          '11': {name: mass.b.atoms.line.gmxtop}
          '12': {name: comment.atoms.line.gmxtop}

    - name: bonds.gmxtop
      begin: '\[\s*(bonds)\s*\]'
      captures:
        '1': {name: keyword.bonds.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: bonds.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.bonds.line.gmxtop}
          '2': {name: serial.j.bonds.line.gmxtop}
          '3': {name: funct.bonds.line.gmxtop}
          '4': {name: c0.bonds.line.gmxtop}
          '5': {name: c1.bonds.line.gmxtop}
          '6': {name: c2.bonds.line.gmxtop}
          '7': {name: c3.bonds.line.gmxtop}
          '8': {name: comment.bonds.line.gmxtop}
    - name: pairs.gmxtop
      begin: '\[\s*(pairs)\s*\]'
      captures:
        '1': {name: keyword.pairs.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: pairs.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.pairs.line.gmxtop}
          '2': {name: serial.j.pairs.line.gmxtop}
          '3': {name: funct.pairs.line.gmxtop}
          '4': {name: c0.pairs.line.gmxtop}
          '5': {name: c1.pairs.line.gmxtop}
          '6': {name: c2.pairs.line.gmxtop}
          '7': {name: c3.pairs.line.gmxtop}
          '8': {name: comment.pairs.line.gmxtop}
    - name: angles.gmxtop
      begin: '\[\s*(angles)\s*\]'
      captures:
        '1': {name: keyword.angles.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: angles.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.angles.line.gmxtop}
          '2': {name: serial.j.angles.line.gmxtop}
          '3': {name: serial.k.angles.line.gmxtop}
          '4': {name: funct.angles.line.gmxtop}
          '5': {name: c0.angles.line.gmxtop}
          '6': {name: c1.angles.line.gmxtop}
          '7': {name: c2.angles.line.gmxtop}
          '8': {name: c3.angles.line.gmxtop}
          '9': {name: comment.angles.line.gmxtop}
    - name: dihedrals.gmxtop
      begin: '\[\s*(dihedrals)\s*\]'
      captures:
        '1': {name: keyword.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: dihedrals.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.dihedrals.line.gmxtop}
          '2': {name: serial.j.dihedrals.line.gmxtop}
          '3': {name: serial.k.dihedrals.line.gmxtop}
          '4': {name: serial.l.dihedrals.line.gmxtop}
          '5': {name: funct.dihedrals.line.gmxtop}
          '6': {name: c0.dihedrals.line.gmxtop}
          '7': {name: c1.dihedrals.line.gmxtop}
          '8': {name: c2.dihedrals.line.gmxtop}
          '9': {name: c3.dihedrals.line.gmxtop}
          '10': {name: c4.dihedrals.line.gmxtop}
          '11': {name: c5.dihedrals.line.gmxtop}
          '12': {name: comment.dihedrals.line.gmxtop}
    - name: virtual_sites3.gmxtop
      begin: '\[\s*(virtual_sites3)\s*\]'
      captures:
        '1': {name: keyword.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: virtual_sites3.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.virtual_sites3.line.gmxtop}
          '2': {name: serial.j.virtual_sites3.line.gmxtop}
          '3': {name: serial.k.virtual_sites3.line.gmxtop}
          '4': {name: serial.l.virtual_sites3.line.gmxtop}
          '5': {name: funct.virtual_sites3.line.gmxtop}
          '6': {name: c0.virtual_sites3.line.gmxtop}
          '7': {name: c1.virtual_sites3.line.gmxtop}
          '8': {name: c2.virtual_sites3.line.gmxtop}
          '9': {name: comment.virtual_sites3.line.gmxtop}
    - name: exclusions.gmxtop
      begin: '\[\s*(exclusions)\s*\]'
      captures:
        '1': {name: keyword.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
    - name: constraints.gmxtop
      begin: '\[\s*(constraints)\s*\]'
      captures:
        '1': {name: keyword.gmxtop}
      end: '(?=(\[\s*(position_restraints|system|molecules|moleculetype|atoms|bonds|pairs|angles|dihedrals|exclusions|constraints|virtual_sites3)\s*\]))'
      patterns:
      - include: '#translation_unit'
      - name: constraints.line.gmxtop 
        match: ^\s*([^;\s]*)\s*([^;\s]*)\s*([^;\s]*)\s+([^;\s]*)\s+([^;\s]*)\s*(.*)
        captures:
          '1': {name: serial.i.constraints.line.gmxtop}
          '2': {name: serial.j.constraints.line.gmxtop}
          '3': {name: funct.constraints.line.gmxtop}
          '4': {name: c0.constraints.line.gmxtop}
          '5': {name: c1.constraints.line.gmxtop}
          '6': {name: comment.constraints.line.gmxtop}

  comment-banner-line:
    match: (?:(?<=//)|(?<=/\*)|^)[\s/*]*(=+\s*(.*?)\s*=+(?:(?=[\s/*+\-]*\*/)|$(\n?)))
    captures:
      '1': {name: meta.toc-list.banner.gmxtop}
      '3': {name: punctuation.whitespace.newline.gmxtop}

  comment-innards:
    patterns:
    - include: '#comment-banner-line'
    - include: '#comment-task-tag-line'
    - include: '#lex-continuation'
    - include: '#lex-newline'

  comment-task-tag-line:
    patterns:
    - name: meta.toc-list.task-tag.prio-high.gmxtop
      begin: "(?ix)\n\t\t\t\t\t    (?= (?-i: @[a-zA-Z_]++ | \\b [A-Z_]++) \\b) @?\
        \ \\b (?:\n\t\t\t\t\t        (FIXME) | (XXX) | (WTF)\n\t\t\t\t\t    ) \\b\n\
        \t\t\t\t\t"
      beginCaptures:
        '0': {name: keyword.other.task-tag.prio-high.gmxtop}
        '1': {name: storage.type.class.fixme.gmxtop}
        '2': {name: storage.type.class.xxx.gmxtop}
        '3': {name: storage.type.class.wtf.gmxtop}
      end: (?=[\s/*]*\*/)|(?<=$\n)
      patterns:
      - include: '#comment-task-tag-line-innards'
    - name: meta.toc-list.task-tag.prio-normal.gmxtop
      begin: "(?ix)\n\t\t\t\t\t    (?= (?-i: @[a-zA-Z_]++ | \\b [A-Z_]++) \\b) @?\
        \ \\b (?:\n\t\t\t\t\t        (TODO)\n\t\t\t\t\t    ) \\b\n\t\t\t\t\t"
      beginCaptures:
        '0': {name: keyword.other.task-tag.prio-normal.gmxtop}
        '1': {name: storage.type.class.todo.gmxtop}
      end: (?=[\s/*]*\*/)|(?<=$\n)
      patterns:
      - include: '#comment-task-tag-line-innards'
    - name: meta.toc-list.task-tag.prio-low.gmxtop
      begin: "(?ix)\n\t\t\t\t\t    (?= (?-i: @[a-zA-Z_]++ | \\b [A-Z_]++) \\b) @?\
        \ \\b (?:\n\t\t\t\t\t        (TBD) | (REVIEW)\n\t\t\t\t\t    ) \\b\n\t\t\t\
        \t\t"
      beginCaptures:
        '0': {name: keyword.other.task-tag.prio-low.gmxtop}
        '1': {name: storage.type.class.tbd.gmxtop}
        '2': {name: storage.type.class.review.gmxtop}
      end: (?=[\s/*]*\*/)|(?<=$\n)
      patterns:
      - include: '#comment-task-tag-line-innards'
    - name: meta.toc-list.task-tag.note.gmxtop
      begin: "(?ix)\n\t\t\t\t\t    (?= (?-i: @[a-zA-Z_]++ | \\b [A-Z_]++) \\b) @?\
        \ \\b (?:\n\t\t\t\t\t        (NOTE) | (NB) | (CHANGED) | (IDEA) | (IMPORTANT)\
        \ | (HACK) | (BUG)\n\t\t\t\t\t    ) \\b\n\t\t\t\t\t"
      beginCaptures:
        '0': {name: keyword.other.task-tag.note.gmxtop}
        '1': {name: storage.type.class.note.gmxtop}
        '2': {name: storage.type.class.nb.gmxtop}
        '3': {name: storage.type.class.changed.gmxtop}
        '4': {name: storage.type.class.idea.gmxtop}
        '5': {name: storage.type.class.important.gmxtop}
        '6': {name: storage.type.class.hack.gmxtop}
        '7': {name: storage.type.class.bug.gmxtop}
      end: (?=[\s/*]*\*/)|(?<=$\n)
      patterns:
      - include: '#comment-task-tag-line-innards'

  comment-task-tag-line-innards:
    patterns:
    - include: '#comment-task-tag-line'
    - include: '#lex-continuation'
    - include: '#lex-newline'

  comments:
    patterns:
    - name: comment.block.gmxtop
      begin: \s*(/\*)
      end: (\*/)(\n?)
      endCaptures:
        '2': {name: punctuation.whitespace.newline.gmxtop}
      captures:
        '1': {name: punctuation.definition.comment.block.gmxtop}
      patterns:
      - include: '#comment-innards'
    - name: invalid.illegal.stray-comment-end.gmxtop
      match: \*/(?![/*])
    - name: comment.line.double-slash.gmxtop
      begin: \s*(//)
      beginCaptures:
        '1': {name: punctuation.definition.comment.line.double-slash.gmxtop}
      end: (?<=$\n)(?<!\\$\n)
      patterns:
      - include: '#comment-innards'
    - name: comment.line.semicolon.gmxtop
      begin: \s*(;)
      beginCaptures:
        '1': {name: punctuation.definition.comment.line.semicolon.gmxtop}
      end: (?<=$\n)(?<!\\$\n)
      patterns:
      - include: '#comment-innards'

  lex:
    patterns:
    - include: '#lex-in-preprocessor'
    - include: '#preprocessor'

  lex-access:
    name: variable.other.dot-access.gmxtop
    match: (?:(?<=\.)|(?<=->))\b([a-zA-Z_]\w*+)\b(?!(?:\s|/\*.*?\*/)*+\()

  lex-constant:
    patterns:
    - match: \s*\b(NULL|true|false|TRUE|FALSE)\b
      captures:
        '1': {name: constant.language.gmxtop}

  lex-continuation:
    patterns:
    - name: punctuation.separator.continuation.gmxtop
      match: (\\)$(\n?)
      captures:
        '1': {name: keyword.other.line-continuation.gmxtop}
        '2': {name: punctuation.whitespace.newline.gmxtop}
    - match: \\(\s+?)(?=\n)$
      captures:
        '1': {name: invalid.deprecated.space-after-continuation.gmxtop}

  lex-core:
    patterns:
    - include: '#comments'
    - include: '#lex-access'
    - include: '#lex-continuation'
    - include: '#lex-newline'
    - include: '#lex-number'
    - include: '#lex-string'

  lex-in-preprocessor:
    patterns:
    - include: '#lex-core'
    - include: '#lex-keyword'
    - include: '#lex-constant'

  lex-keyword:
    patterns:
    - match: \s*\b(sizeof|(?:__|(?!\w+__))typeof(?:__)?)\b
      captures:
        '1': {name: keyword.operator.gmxtop}
    - match: \s*\b((?:__|(?!\w+__))asm(?:__)?|break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while|__extension__)\b
      captures:
        '1': {name: keyword.control.gmxtop}
    - match: \s*\b(auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void)\b
      captures:
        '1': {name: storage.type.gmxtop}
    - match: \s*\b(extern|static|register|__attribute__|(?:__|(?!\w+__))(?:const|restrict|volatile|inline)(?:__)?)\b
      captures:
        '1': {name: storage.modifier.gmxtop}
    - match: \s*\b(class|struct|union|enum|typedef)\b
      captures:
        '1': {name: storage.type.gmxtop}
    - name: keyword.operator.assignment.gmxtop
      match: (\-|\+|\*|\/|%|&|\||\^|<<|>>)?=
    - name: keyword.operator.comparison.gmxtop
      match: (==|!=|<=|>=|<>|<|>)
    - name: keyword.operator.increment-decrement.gmxtop
      match: (\-\-|\+\+)
    - name: keyword.operator.ternary.gmxtop
      match: (\?|:)
    - name: keyword.operator.arithmetic.gmxtop
      match: (\-|\+|\*|\/|%)
    - name: keyword.operator.logical.gmxtop
      match: (!|&&|\|\|)
    - name: keyword.operator.bitwise.gmxtop
      match: (~|&|\||\^|<<|>>)
    - name: keyword.operator.dereference.gmxtop
      match: (\.|->)(?=(?:\s|/\*.*?\*/)*+[A-Za-z_]\w*+)

  lex-newline:
    name: punctuation.whitespace.newline.gmxtop
    match: $\n

  lex-number:
    patterns:
    - name: constant.numeric.float.hexadecimal.gmxtop
      match: "(?ix)  # hexadecimal float\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t\
        (0x)\n\n\t\t\t\t\t\t# significand\n\t\t\t\t\t\t(?: (\\.) (?=p)  # invalid\n\
        \t\t\t\t\t\t  |        [0-9a-f]*+ ([0-9a-z]*?) [0-9a-f]*+\n\t\t\t\t\t\t  \
        \  (?: \\. [0-9a-f]*+ ([0-9a-z.]*?) [0-9a-f]*+ )? )\n\n\t\t\t\t\t\t# exponent\
        \ (required)\n\t\t\t\t\t\t(?: (p) (?:        [+\\-]  [0-9]++ ([0-9a-z]*?)\n\
        \t\t\t\t\t\t          | (?=[0-9a-z.]) [0-9]*+ ([0-9a-z.]*?) )\n\t\t\t\t\t\t\
        \  | (p) )\n\n\t\t\t\t\t\t# remaining valid chars and type\n\t\t\t\t\t\t[0-9]*+\
        \ ([fl]?)\n\n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.hexadecimal.gmxtop}
        '2': {name: invalid.illegal.number.missing-fragment.significand.gmxtop}
        '3': {name: invalid.illegal.numeric-literal-character.float.whole-number.gmxtop}
        '4': {name: invalid.illegal.numeric-literal-character.float.fraction.gmxtop}
        '5': {name: keyword.other.exponent.hexadecimal.gmxtop}
        '6': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '7': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '8': {name: invalid.illegal.number.missing-fragment.exponent.gmxtop}
        '9': {name: storage.type.number.suffix.float.gmxtop}
    - name: constant.numeric.float.hexadecimal.gmxtop
      match: "(?ix)  # hexadecimal float without required exponent\n\t\t\t\t\t\t(?<!\\\
        .) \\b\n\n\t\t\t\t\t\t(0x)\n\n\t\t\t\t\t\t# significand (at least a period)\n\
        \t\t\t\t\t\t     [0-9a-f]*+ ([0-9a-z&&[^p]]*?) [0-9a-f]*+\n\t\t\t\t\t\t(\\\
        .) [0-9a-f]*+ ([0-9a-z.&&[^p]]*?) [0-9a-f]*+\n\n\t\t\t\t\t\t# type\n\t\t\t\
        \t\t\t(l?)\n\n\t\t\t\t\t\t(?:(?<=\\.)|\\b) (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.hexadecimal.gmxtop}
        '2': {name: invalid.illegal.numeric-literal-character.float.whole-number.gmxtop}
        '3': {name: invalid.illegal.number.hexadecimal-float-requires-exponent.gmxtop}
        '4': {name: invalid.illegal.numeric-literal-character.float.fraction.gmxtop}
        '5': {name: storage.type.number.suffix.float.gmxtop}
    - name: constant.numeric.float.gmxtop
      match: "(?ix)  # decimal float literal\n\t\t\t\t\t\t(?<!\\.) (?:(?=\\.)|\\b)\n\
        \n\t\t\t\t\t\t(?!0x)\n\t\t\t\t\t\t# significand\n\t\t\t\t\t\t(?: (?: [0-9]++\
        \ ([0-9a-z&&[^e]]*?) [0-9]*+ )?\n\t\t\t\t\t\t    \\.  [0-9]++ ([0-9a-z.&&[^e]]*?)\
        \ [0-9]*+\n\n\t\t\t\t\t\t  |     [0-9]++ ([0-9a-z&&[^e]]*?) [0-9]*+ (?: \\\
        . | (?=e)) )\n\n\t\t\t\t\t\t# exponent (optional)\n\t\t\t\t\t\t(?: (e) (?:\
        \ [+\\-]  [0-9]++ ([0-9a-z]*?)\n\t\t\t\t\t\t          |        [0-9]++ ([0-9a-z.]*?)\
        \ )\n\t\t\t\t\t\t  | ( p     [+\\-]? [0-9]++\n\t\t\t\t\t\t    | [ep]     \
        \             [0-9a-z.]*?) )?\n\n\t\t\t\t\t\t# any invalid chars and type\n\
        \t\t\t\t\t\t([0-9a-z]*?) [0-9]*+ ([fl]?)\n\n\t\t\t\t\t\t(?:(?<=\\.)|\\b) (?!\\\
        .)\n\t\t\t\t\t"
      captures:
        '1': {name: invalid.illegal.numeric-literal-character.float.whole-number.gmxtop}
        '2': {name: invalid.illegal.numeric-literal-character.float.fraction.gmxtop}
        '3': {name: invalid.illegal.numeric-literal-character.float.whole-number.gmxtop}
        '4': {name: keyword.other.exponent.decimal.gmxtop}
        '5': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '6': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '7': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '8': {name: invalid.illegal.numeric-literal-character.float.exponent.gmxtop}
        '9': {name: storage.type.number.suffix.float.gmxtop}
    - name: constant.numeric.integer.zero.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\t\t\t\t\t\t(0x)? 0++\n\t\t\t\t\t\t\
        (u?l{0,2}|lul?|llu)\n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.hexadecimal.gmxtop}
        '2': {name: storage.type.number.suffix.gmxtop}
    - name: invalid.illegal.invalid-number-literal.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t(?: (0x) | (0b) )\n\t\
        \t\t\t\t\t(u?l{0,2}|lul?|llu)\n\n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
    - name: constant.numeric.integer.hexadecimal.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t(0x) [0-9a-f]++\n\n\t\
        \t\t\t\t\t# any invalid chars\n\t\t\t\t\t\t([0-9a-z]*?)\n\n\t\t\t\t\t\t# the\
        \ remainder (after invalid chars, if any) and a type\n\t\t\t\t\t\t[0-9a-f]*\
        \ (u?l{0,2}|lul?|llu)\n\n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.hexadecimal.gmxtop}
        '2': {name: invalid.illegal.numeric-literal-character.integer.gmxtop}
        '3': {name: storage.type.number.suffix.gmxtop}
    - name: constant.numeric.integer.binary.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t(0b) [01]++\n\n\t\t\t\
        \t\t\t# any invalid chars\n\t\t\t\t\t\t([0-9a-z]*?)\n\n\t\t\t\t\t\t# the remainder\
        \ (after invalid chars, if any) and a type\n\t\t\t\t\t\t[01]* (u?l{0,2}|lul?|llu)\n\
        \n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.binary.gmxtop}
        '2': {name: invalid.illegal.numeric-literal-character.integer.gmxtop}
        '3': {name: storage.type.number.suffix.gmxtop}
    - name: constant.numeric.integer.octal.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t(0) [0-7]++\n\n\t\t\t\
        \t\t\t# any invalid chars\n\t\t\t\t\t\t([0-9a-z]*?)\n\n\t\t\t\t\t\t# the remainder\
        \ (after invalid chars, if any) and a type\n\t\t\t\t\t\t[0-7]* (u?l{0,2}|lul?|llu)\n\
        \n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: storage.type.number.prefix.octal.gmxtop}
        '2': {name: invalid.illegal.numeric-literal-character.integer.gmxtop}
        '3': {name: storage.type.number.suffix.gmxtop}
    - name: constant.numeric.integer.decimal.gmxtop
      match: "(?ix)\n\t\t\t\t\t\t(?<!\\.) \\b\n\n\t\t\t\t\t\t[0-9]++\n\n\t\t\t\t\t\
        \t# any invalid chars\n\t\t\t\t\t\t([0-9a-z]*?)\n\n\t\t\t\t\t\t# the remainder\
        \ (after invalid chars, if any) and a type\n\t\t\t\t\t\t[0-9]* (u?l{0,2}|lul?|llu)\n\
        \n\t\t\t\t\t\t\\b (?!\\.)\n\t\t\t\t\t"
      captures:
        '1': {name: invalid.illegal.numeric-literal-character.integer.gmxtop}
        '2': {name: storage.type.number.suffix.gmxtop}

  lex-string:
    patterns:
    - name: string.quoted.double.gmxtop
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gmxtop}
      end: (")|(?<=^|[^\\])\s*(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.gmxtop}
        '2': {name: invalid.illegal.unexpected-end-of-line.gmxtop}
      patterns:
      - include: '#lex-continuation'
      - include: '#string_escaped_char'
      - include: '#string_placeholder'
    - name: string.quoted.single.gmxtop
      begin: ''''
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gmxtop}
      end: (')|(?<=^|[^\\])\s*(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.gmxtop}
        '2': {name: invalid.illegal.unexpected-end-of-line.gmxtop}
      patterns:
      - include: '#lex-continuation'
      - include: '#string_escaped_char'

  parens:
    begin: (?=\()
    end: \)
    patterns:
    - include: '#parens-lookahead-end'

  parens-lookahead-end:
    name: meta.parens.gmxtop
    begin: \(
    end: (?=\))
    patterns:
    - include: '#type'
    - include: '#lex'
    - include: '#call'
    - include: '#support'
    - include: $base

  ppline-any:
    name: meta.preprocessor.directive.null-directive.gmxtop
    begin: ^\s*(#)
    beginCaptures:
      '0': {name: keyword.other.preprocessor.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns:
    - include: '#lex-core'

  ppline-directive:
    name: meta.preprocessor.directive.gmxtop
    begin: ^\s*(#)\s*(if|ifdef|ifndef|elif|else|endif|pragma|line|define|undef|error|warning)\b
    beginCaptures:
      '0': {name: keyword.other.preprocessor.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns:
    - include: '#lex-core'

  ppline-directive-invalid-usage:
    name: meta.preprocessor.directive.gmxtop
    match: (^\s*(#)\s*(if|ifdef|ifndef|elif|pragma|define|undef|include|include_next|import)\b)\s*?(\n|$)
    captures:
      '1': {name: keyword.other.preprocessor.gmxtop}
      '4': {name: invalid.illegal.invalid-usage-of-preprocessor-directive.gmxtop}

  ppline-directive-obsolete:
    name: meta.preprocessor.directive.deprecated.gmxtop
    begin: ^\s*(#)\s*(assert|unassert|ident|sccs)\b
    beginCaptures:
      '1': {name: keyword.other.preprocessor.gmxtop}
      '2': {name: invalid.deprecated.preprocessor.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns:
    - include: '#lex-core'

  ppline-include:
    name: meta.preprocessor.include.c meta.preprocessor.c.include
    begin: ^\s*(#)\s*(include|include_next|import)\b
    beginCaptures:
      '0': {name: keyword.other.preprocessor.include.gmxtop}
    end: (?:("[^"]*?)|(<[^>]*?))(\n)|(?<=$\n)(?<!\\$\n)
    endCaptures:
      '1': {name: string.quoted.double.include.gmxtop}
      '2': {name: string.quoted.other.lt-gt.include.gmxtop}
      '3': {name: invalid.illegal.unexpected-end-of-line.gmxtop}
    patterns:
    - include: '#ppline-include-innards'

  ppline-include-innards:
    patterns:
    - include: '#preprocessor-lex'
    - name: string.quoted.double.include.gmxtop
      begin: '"|(?=.*?")'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gmxtop}
      end: '"|(?<=^|[^\\])(?=\s*\n)'
      endCaptures:
        '0': {name: punctuation.definition.string.end.gmxtop}
    - name: string.quoted.other.lt-gt.include.gmxtop
      begin: <(?=.*?>)
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gmxtop}
      end: '>|(?<=^|[^\\])(?=\s*\n)'
      endCaptures:
        '0': {name: punctuation.definition.string.end.gmxtop}
    - name: meta.parens.gmxtop
      begin: \(
      end: \)|(?<=^|[^\\])(?=\s*\n)
      patterns:
      - include: '#ppline-include-innards'

  ppline-invalid:
    name: meta.preprocessor.directive.illegal.gmxtop
    begin: ^\s*(#)(?!\s*(?=/[/*]|(?>\\\s*\n)|\n|$))\s*(\w*)
    beginCaptures:
      '1': {name: keyword.other.preprocessor.gmxtop}
      '2': {name: invalid.illegal.preprocessor.gmxtop}
    end: (?<=$\n)(?<!\\$\n)

  ppline-macro:
    name: meta.preprocessor.macro.gmxtop
    begin: ^\s*(#)(?=\s*(define)\s+[a-zA-Z_]\w*+)
    beginCaptures:
      '0': {name: keyword.other.preprocessor.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns:
    - match: \s*(##)
      captures:
        '1': {name: keyword.other.preprocessor.gmxtop}
    - match: \s*(#)\s*([a-zA-Z_]\w*+)
      captures:
        '1': {name: keyword.other.preprocessor.gmxtop}
        '2': {name: string.macro.stringify.gmxtop}
    - include: '#ppline-macro-head-function'
    - include: '#ppline-macro-head-object'
    - include: '#lex-in-preprocessor'
    - include: '#support'

  ppline-macro-head-function:
    contentName: meta.preprocessor.macro.parameters.gmxtop
    begin: (?<!##)(?<=#)(\s*define)\s+([a-zA-Z_]\w*+)(\()
    beginCaptures:
      '1': {name: keyword.other.preprocessor.define.gmxtop}
      '2': {name: entity.name.function.preprocessor.gmxtop}
      '3': {name: meta.preprocessor.macro.parameters.gmxtop}
    end: (?<=\))|(?<=^|[^\\])\s*(\n)
    endCaptures:
      '1': {name: invalid.illegal.unexpected-end-of-line.gmxtop}
    patterns:
    - match: \)
    - begin: \b([a-zA-Z_]\w*+)\b
      beginCaptures:
        '1': {name: variable.parameter.gmxtop}
      end: (?<=\))|(?=(?<=^|[^\\])\s*(\n))
      patterns:
      - match: \)
      - include: '#ppline-macro-param-next'
      - include: '#ppline-macro-param-vararg'
      - include: '#ppline-macro-param-lex'
      - include: '#ppline-macro-param-lex-invalid'
    - include: '#ppline-macro-param-vararg'
    - include: '#ppline-macro-param-lex'
    - include: '#ppline-macro-param-lex-invalid'

  ppline-macro-head-object:
    match: (?<!##)(?<=#)(\s*define)\s+([a-zA-Z_]\w*+)(?!\()[\s&&[^\n]]*
    captures:
      '1': {name: keyword.other.preprocessor.define.gmxtop}
      '2': {name: entity.name.constant.preprocessor.gmxtop}

  ppline-macro-param-lex:
    patterns:
    - match: \s*
    - name: invalid.illegal.unexpected-end-of-line.gmxtop
      begin: \s*//
      beginCaptures:
        '0': {name: punctuation.definition.comment.gmxtop}
      end: (?<=^|[^\\])\s*(?=\n)$
      patterns:
      - include: '#lex-continuation'
    - include: '#preprocessor-lex'

  ppline-macro-param-lex-invalid:
    patterns:
    - name: invalid.illegal.unexpected-character.gmxtop
      match: |-
        (?x)
        (?: (?! (?:\s|/\*.*?\*/)*+
                (?: \) | (?>(?:\\\s*)?$\n?) | /[/*] ) )
            .) # no star unlike its friends in arg/vararg

  ppline-macro-param-next:
    begin: (,)
    beginCaptures:
      '1': {name: punctuation.separator.parameter.gmxtop}
    end: \b([a-zA-Z_]\w*+)\b|(?=\.\.\.)|(\))|(?=(?<=^|[^\\])\s*(\n))
    endCaptures:
      '1': {name: variable.parameter.gmxtop}
      '2': {name: invalid.illegal.unexpected-closing-paren.gmxtop}
    patterns:
    - include: '#ppline-macro-param-lex'
    - name: invalid.illegal.unexpected-character.gmxtop
      match: "(?x)\n(?: (?! (?:\\s|/\\*.*?\\*/)*+\n\t    (?: \\b([a-zA-Z_]\\w*+)\\\
        b | \\.\\.\\. | \\) | (?>(?:\\\\\\s*)?$\\n?) | /[/*] ) )\n    .)*"

  ppline-macro-param-vararg:
    begin: (\.\.\.)
    beginCaptures:
      '1': {name: punctuation.definition.ellipsis.gmxtop}
    end: (\))|(?=(?<=^|[^\\])\s*(\n))
    patterns:
    - include: '#ppline-macro-param-lex'
    - name: invalid.illegal.unexpected-character.gmxtop
      match: "(?x)\n(?: (?! (?:\\s|/\\*.*?\\*/)*+\n\t    (?: \\) | (?>(?:\\\\\\s*)?$\\\
        n?) | /[/*] ) )\n    .)*"

  ppline-pragma-mark:
    name: meta.preprocessor.directive.pragma-mark.gmxtop
    contentName: meta.toc-list.pragma-mark.gmxtop
    begin: (^\s*(#)\s*(pragma\s+mark)\b)[\s&&[^\n]]*
    beginCaptures:
      '1': {name: keyword.other.preprocessor.pragma.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns:
    - include: '#preprocessor-lex'
    - name: string.other.pragma-mark.gmxtop
      match: .

  ppline-undef:
    name: meta.preprocessor.undef.gmxtop
    begin: (^\s*(#)\s*(undef))\s+([a-zA-Z_]\w*+)
    beginCaptures:
      '1': {name: keyword.other.preprocessor.gmxtop}
      '4': {name: variable.macro.undef.gmxtop}
    end: (?<=$\n)(?<!\\$\n)
    patterns: []

  preprocessor:
    begin: (?=^\s*(#))
    end: (?!^\s*(#))
    patterns:
    - include: '#preprocessor-disabled'
    - include: '#ppline-directive-invalid-usage'
    - include: '#ppline-macro'
    - include: '#ppline-undef'
    - include: '#ppline-pragma-mark'
    - include: '#ppline-include'
    - include: '#ppline-directive'
    - include: '#ppline-directive-obsolete'
    - include: '#ppline-invalid'
    - include: '#ppline-any'

  preprocessor-disabled:
    begin: ^\s*(#)(?=\s*(if)\b(?=(?:\s|/\*.*?\*/)*+(0[xX])?0++\b(?:\s|/\*.*?\*/)*+(//.*)?\\?$))
    beginCaptures:
      '0': {name: meta.preprocessor.directive.c keyword.other.preprocessor.gmxtop}
    end: (?=^\s*(#)\s*(endif|else|elif)\b)
    patterns:
    - name: comment.other.preprocessor-disabled.gmxtop
      begin: ^
      end: $\n?
      patterns:
      - include: '#preprocessor-disabled-conditional'
      - include: '#preprocessor-disabled-directive'
    - name: meta.preprocessor.directive.gmxtop
      begin: (?<!##)(?<=#)\s*(if)\b(?=(?:\s|/\*.*?\*/)*+(0[xX])?0++\b(?:\s|/\*.*?\*/)*+(//.*)?\\?$)
      beginCaptures:
        '1': {name: keyword.other.preprocessor.define.gmxtop}
      end: (?<=$\n)(?<!\\$\n)
      patterns:
      - include: '#lex-core'

  preprocessor-disabled-conditional:
    begin: ^\s*(#)\s*if(n?def)?\b
    end: ^\s*(#)\s*endif\b.*$\n?
    patterns:
    - include: '#preprocessor-disabled-conditional'
    - include: '#preprocessor-disabled-directive'

  preprocessor-disabled-directive:
    begin: ^\s*(#)
    end: (?<=$\n)(?<!\\$\n)

  preprocessor-lex:
    patterns:
    - include: '#comments'
    - include: '#lex-continuation'
    - include: '#lex-newline'

  special_block:
    begin: |-
      (?x)
      (?= \s*
          (?:
              (?: \b extern \b
                  (?: "(\\.|[^"])*" | '(\\.|[^'])*' | /\*.*?\*/ | \s)* ) |
              (?: \b namespace \b
                  (?: (?: /\*.*?\*/ | \s)* \b [A-Za-z_]\w*+ \b)?
                  (?: /\*.*?\*/ | \s)* ) )
          \{ )
    end: \}
    patterns:
    - include: '#lex'
    - name: meta.block.special.gmxtop
      begin: \{
      end: (?=\})
      patterns:
      - include: $base

  string_escaped_char:
    patterns:
    - name: constant.character.escape.gmxtop
      match: \\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})
    - name: invalid.illegal.unknown-escape.gmxtop
      match: \\.

  string_placeholder:
    patterns:
    - name: constant.other.placeholder.gmxtop
      match: |-
        (?x)%
        (\d+\$)?                             # field (argument #)
        [#0\- +']*                           # flags
        [,;:_]?                              # separator character (AltiVec)
        ((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
        (\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
        (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
        [diouxXDOUeEfFgGaACcSspn%]           # conversion type
    - name: invalid.illegal.placeholder.gmxtop
      match: '%'

  support:
    patterns:
    - include: '#support-type'
    - include: '#support-macro'
    - include: '#support-function'

  support-function:
    patterns:
    - match: \s*\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      captures:
        '1': {name: support.function.C99.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   Py_REFCNT | Py_TYPE | Py_SIZE
          | Py_X?(?:INC|DEC)REF | Py_CLEAR
          | _?Py(?:Object|Type|HeapType|Dict|Set|List|Tuple|Long|Exception|Err)_\w++ )
        \b
      captures:
        '1': {name: support.function.cpython.gmxtop}

  support-macro:
    patterns:
    - match: \s*\b(__builtin_\w++)\b
      captures:
        '1': {name: support.function.intrinsic.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   (?:__)?(?:DECL(?:ARE)?|DEF(?:INE)?)_[A-Z0-9_]+
          | (?:__)?[A-Z_][A-Z0-9_]*_(?:DECL(?:ARE)?|DEF(?:INE)?)
          | EXPORT(?:_UNUSED)?(?:_PER_CPU)?_SYMBOL(?:_GPL(?:_FUTURE)?)?
          | MODULE_(?:INFO|ALIAS|LICENSE|AUTHOR|DESCRIPTION|DEVICE_TABLE|VERSION|FIRMWARE)
          | (?:__)?MODULE_PARM_(?:TYPE|DESC)
          | module_param(?:(?:_array)?(?:_named)?|_call)
          | (?:module|core|postcore|arch|subsys|fs|device|late)_param_cb
          | [HL]?LIST_HEAD
          | (?:_|__BIN|BIN|BUS|DRIVER|CLASS|DEVICE)_ATTR(?:_R[OW])? )
        \b
      captures:
        '1': {name: support.function.linux-kernel.macro.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   _(?:IRQL|Kernel)_\w+_
          | _Interlocked_operand_
          | _Dispatch_type_
          | _Flt_CompletionContext_Outptr_ )
        \b
      captures:
        '1': {name: support.function.windows-sal2.annotation.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   PyAPI_(?:FUNC|DATA)
          | PyMODINIT_FU.gmxtop
          | Py_LOCAL(?:_INLINE)?
          | PyDoc_(?:STR(?:VAR)?|VAR)
          | PyObject(?:_VAR)?_HEAD
          | _PyObject_HEAD_EXTRA
          | PyException_HEAD
          | Py(?:Var)?Object_HEAD_INIT
          | PyModuleDef_HEAD_INIT
          | Py_(RETURN)_(?:FALSE|TRUE|NONE|NOTIMPLEMENTED|NAN|INF) )
        \b
      captures:
        '1': {name: support.function.cpython.macro.gmxtop}
        '2': {name: keyword.control.gmxtop}
    - match: \s*\b(_Py_IDENTIFIER)\b\s*\(\s*([A-Za-z_]\w*+)\s*\)
      captures:
        '1': {name: support.function.cpython.macro.gmxtop}
        '2': {name: string.support.cpython.identifier.gmxtop}
    - match: \s*\bPyId_([A-Za-z_]\w*+)\b
      captures:
        '1': {name: string.support.cpython.identifier.gmxtop}
    - match: \s*\b((?:CONFIG|HAVE)_[A-Z0-9_]++)\b
      captures:
        '1': {name: support.constant.config.gmxtop}

  support-type:
    patterns:
    - match: \s*\b(u_char|u_short|u_int|u_long|ushort|uint|(?:u_quad|quad|qaddr|caddr|daddr|dev|fixpt|blkcnt|blksize|gid|in_addr|in_port|ino|key|mode|nlink|id|pid|off|segsz|swblk|uid|id|clock|size|ssize|time|useconds|suseconds)_t)\b
      captures:
        '1': {name: support.type.sys-types.gmxtop}
    - match: \s*\b(pthread_(?:t|attr_t|once_t|key_t|(?:cond|mutex|rwlock)(?:attr)?_t))\b
      captures:
        '1': {name: support.type.pthread.gmxtop}
    - match: \s*\b(u?int(?:(?:_least|_fast)?(?:8|16|32|64)_t|ptr_t|max_t))\b
      captures:
        '1': {name: support.type.stdint.gmxtop}
    - match: \s*\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      captures:
        '1': {name: support.constant.mac-classic.gmxtop}
    - match: \s*\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      captures:
        '1': {name: support.type.mac-classic.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   Py(?:Var|Type|HeapType|Dict|Set|List|Tuple|BaseException)?Object
          | PyType_(?:Spec|Slot) )
        \b
      captures:
        '1': {name: support.type.cpython.gmxtop}
    - match: |-
        (?x)
        \s*\b
        (   Py(?:BaseObject|Type|Super|Bool|Dict
                |DictIter(?:Key|Value|Item)
                |Dict(?:Key|Value|Item)s
                |(?:Set|List|Tuple)(?:Iter)?
                |FrozenSet|ListRevIter)_Type
          | _?PyExc_\w++
          | Py_(?:False|True|None|NotImplemented) )
        \b
      captures:
        '1': {name: support.constant.cpython.gmxtop}

  translation_unit:
    patterns:
    - include: '#special_block'
    - include: '#typedef'
    - include: '#type'
    - include: '#lex'
    - include: '#support-macro'
    - include: '#function'
    - include: '#support'
    - include: '#block'
    - include: '#parens'

